openapi: 3.0.0
info:
  version: 1.0.0
  title: Expenses Tracker Api
  description: A simple API to track where user's money goes. Made for TAMK Business Information System studies Backend course project.
servers:
  - url: https://expenses-api-r7a9.onrender.com/api/
paths:
  /expenses:
    get:
      description: Returns a array of all expenses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    item:
                      type: string
                    shop:
                      type: string
                    category:
                      type: string
                    price:
                      type: number
                      format: float
                    date:
                      type: string
        '500':
          $ref: '#/components/responses/500Error'
    post:
      description: NOT WORKING. Should create a new item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                item:
                  type: string
                shop:
                  type: string
                price:
                  type: number
                  format: float
                date:
                  type: string
      responses:
        '201':
          description: Created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:   
                    id:
                      type: integer
                    item:
                      type: string
                    shop:
                      type: string
                    category:
                      type: string
                    price:
                      type: number
                      format: float
                    date:
                      type: string
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'

    put:
      description: NOT WORKING. Should update an existing item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                    id:
                      type: integer
                    item:
                      type: string
                    shop:
                      type: string
                    category:
                      type: string
                    price:
                      type: number
                      format: float
                    date:
                      type: string
      responses:
        '200':
          description: Updated succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'

  /expenses/id/{id}:
    get:
      description: Get specific item by ID
      parameters:
        - name: searchid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned an item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'
          
    /expenses/month/{id}:
    get:
      description: Get all items in specific month
      parameters:
        - name: searchmonth
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned all items in specific month
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'
  
    /expenses/shop/{shop}:
    get:
      description: Get all items from specific shop
      parameters:
        - name: searchshop
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned all items from specific shop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'
          
  /expenses/{id}
    delete:
      description: Delete a  specific item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item deleted
          content:
            text/plain:
              schema:
                type: string
                example: Item deleted

components:
  schemas:
    Item:
      type: object
      properties:   
        id:
          type: integer
        item:
          type: string
        shop:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
        date:
          type: string
      
  responses:
    400Error:
      description: Invalid request
      content:
        text/plain:
          schema:
            type: string
            example: Invalid value
    404Error:
      description: Not found
      content:
        text/plain:
          schema:
            type: string
            example: Not found
    500Error:
      description: Internal error
      content:
        text/plain:
          schema:
            type: string
            example: Internal error
